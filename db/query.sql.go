// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDestination = `-- name: CreateDestination :exec
INSERT INTO destination (
  id, name, description, attraction
) VALUES (
  $1, $2, $3, $4
)
`

type CreateDestinationParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	Attraction  string
}

func (q *Queries) CreateDestination(ctx context.Context, arg CreateDestinationParams) error {
	_, err := q.db.Exec(ctx, createDestination,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Attraction,
	)
	return err
}

const createTrip = `-- name: CreateTrip :exec
INSERT INTO trip (
  id, name, start_date, end_date, destination_id
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateTripParams struct {
	ID            pgtype.UUID
	Name          string
	StartDate     string
	EndDate       string
	DestinationID pgtype.UUID
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) error {
	_, err := q.db.Exec(ctx, createTrip,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.DestinationID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, email, name, password
) VALUES (
  $1, $2, $3, $4
)
`

type CreateUserParams struct {
	ID       pgtype.UUID
	Email    string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Password,
	)
	return err
}

const deleteDestination = `-- name: DeleteDestination :exec
DELETE FROM destination
 WHERE id = $1
`

func (q *Queries) DeleteDestination(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDestination, id)
	return err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trip
 WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTrip, id)
	return err
}

const demoteAdmin = `-- name: DemoteAdmin :exec
UPDATE users SET admin = false
 WHERE email = $1
`

func (q *Queries) DemoteAdmin(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, demoteAdmin, email)
	return err
}

const getDestination = `-- name: GetDestination :one
SELECT name, description, attraction FROM destination
 WHERE id = $1 LIMIT 1
`

type GetDestinationRow struct {
	Name        string
	Description string
	Attraction  string
}

func (q *Queries) GetDestination(ctx context.Context, id pgtype.UUID) (GetDestinationRow, error) {
	row := q.db.QueryRow(ctx, getDestination, id)
	var i GetDestinationRow
	err := row.Scan(&i.Name, &i.Description, &i.Attraction)
	return i, err
}

const getPass = `-- name: GetPass :one
SELECT id, password, name, admin FROM users
 WHERE email = $1 LIMIT 1
`

type GetPassRow struct {
	ID       pgtype.UUID
	Password string
	Name     string
	Admin    bool
}

func (q *Queries) GetPass(ctx context.Context, email string) (GetPassRow, error) {
	row := q.db.QueryRow(ctx, getPass, email)
	var i GetPassRow
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Admin,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT name, start_date, end_date, destination_id FROM trip
 WHERE id = $1 LIMIT 1
`

type GetTripRow struct {
	Name          string
	StartDate     string
	EndDate       string
	DestinationID pgtype.UUID
}

func (q *Queries) GetTrip(ctx context.Context, id pgtype.UUID) (GetTripRow, error) {
	row := q.db.QueryRow(ctx, getTrip, id)
	var i GetTripRow
	err := row.Scan(
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.DestinationID,
	)
	return i, err
}

const listDestinations = `-- name: ListDestinations :many
SELECT id, name, description, attraction FROM destination
`

func (q *Queries) ListDestinations(ctx context.Context) ([]Destination, error) {
	rows, err := q.db.Query(ctx, listDestinations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Destination
	for rows.Next() {
		var i Destination
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Attraction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrips = `-- name: ListTrips :many
SELECT id, name, start_date, end_date, destination_id FROM trip
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.DestinationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const promoteAdmin = `-- name: PromoteAdmin :exec
UPDATE users SET admin = true
 WHERE email = $1
`

func (q *Queries) PromoteAdmin(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, promoteAdmin, email)
	return err
}

const updateDestination = `-- name: UpdateDestination :exec
UPDATE destination
 SET name = $2,
 description = $3,
 attraction = $4
WHERE id = $1
`

type UpdateDestinationParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	Attraction  string
}

func (q *Queries) UpdateDestination(ctx context.Context, arg UpdateDestinationParams) error {
	_, err := q.db.Exec(ctx, updateDestination,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Attraction,
	)
	return err
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trip
 SET name = $2,
 start_date = $3,
 end_date = $4,
 destination_id = $5
WHERE id = $1
`

type UpdateTripParams struct {
	ID            pgtype.UUID
	Name          string
	StartDate     string
	EndDate       string
	DestinationID pgtype.UUID
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.DestinationID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
 SET email = $2,
 name = $3
WHERE email = $1
`

type UpdateUserParams struct {
	Email   string
	Email_2 string
	Name    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Email, arg.Email_2, arg.Name)
	return err
}
